// Code generated by MockGen. DO NOT EDIT.
// Source: event.go
//
// Generated by this command:
//
//	mockgen -source event.go -destination event_mock.go -package repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	entity "dev11/app/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEvent) Create(ctx context.Context, event entity.Event) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventMockRecorder) Create(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEvent)(nil).Create), ctx, event)
}

// Delete mocks base method.
func (m *MockEvent) Delete(ctx context.Context, userID, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventMockRecorder) Delete(ctx, userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEvent)(nil).Delete), ctx, userID, id)
}

// GetByID mocks base method.
func (m *MockEvent) GetByID(ctx context.Context, userID, id string) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID, id)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEventMockRecorder) GetByID(ctx, userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEvent)(nil).GetByID), ctx, userID, id)
}

// GetForRange mocks base method.
func (m *MockEvent) GetForRange(ctx context.Context, userID string, dateStart, dateEnd time.Time) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForRange", ctx, userID, dateStart, dateEnd)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForRange indicates an expected call of GetForRange.
func (mr *MockEventMockRecorder) GetForRange(ctx, userID, dateStart, dateEnd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForRange", reflect.TypeOf((*MockEvent)(nil).GetForRange), ctx, userID, dateStart, dateEnd)
}

// Update mocks base method.
func (m *MockEvent) Update(ctx context.Context, event entity.Event) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, event)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEventMockRecorder) Update(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEvent)(nil).Update), ctx, event)
}
